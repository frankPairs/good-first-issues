---
import { getProgrammingLanguages } from "../requests/programmingLanguages";

const programmingLanguages = await getProgrammingLanguages();
---

<ul>
  {
    programmingLanguages.items.map((lang) => (
      <li>
        <input
          hidden
          type="radio"
          id={lang.id}
          name="language"
          value={lang.id}
        />
        <label class="input-label" for={lang.id}>
          {lang.name}
        </label>
      </li>
    ))
  }
</ul>

<style>
  ul {
    display: flex;
    flex-direction: row;
    list-style: none;
    padding: 0;
    color: rgba(var(--color-white), 1);
    gap: var(--spacing-24);
  }

  li {
    display: flex;
    border-radius: var(--radius-8);
    font-size: var(--font-size-14);
    height: var(--spacing-40);
    flex: 1;
    color: inherit;
    border: 1px solid rgba(var(--color-white), 1);
  }

  li .input-label {
    display: flex;
    align-items: center;
    cursor: pointer;
    justify-content: center;
    width: 100%;
    height: 100%;
    padding: 0 1rem;
    transition: ease-in-out 200ms background-color;
  }

  li:hover .input-label {
    background-color: rgba(var(--color-white), 0.2);
  }

  li:active .input-label {
    background-color: rgba(var(--color-white), 0.4);
  }

  li input[type="radio"]:checked + .input-label {
    background-color: rgba(var(--color-white), 0.2);
    cursor: default;
  }
</style>

<script>
  import { subscribeKeys } from "nanostores";
  import { $repositoriesStore } from "../stores/repositories";
  import type { ProgrammingLanguageID } from "../models/programmingLanguages";

  const languageListEl = document.querySelector("ul");

  // Add event listener to the language list
  languageListEl?.addEventListener("change", (event) => {
    const inputEl = event.target as HTMLInputElement;

    $repositoriesStore.setKey(
      "filters.language",
      inputEl.value as ProgrammingLanguageID
    );
  });

  // Listen for changes in the language filter. When the filter changes, update the radio checked state
  subscribeKeys($repositoriesStore, ["filters.language"], (value) => {
    const selectedLanguageEl = languageListEl?.querySelector<HTMLInputElement>(
      `input[value="${value.filters.language}"]`
    );

    if (selectedLanguageEl) {
      selectedLanguageEl.checked = true;
    }
  });
</script>
